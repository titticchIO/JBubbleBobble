package game.model.bubbles;

import game.model.Model;
import game.model.enemies.Enemy;

/**
 * The {@code PlayerBubble} class represents a bubble generated by the player.
 * This bubble can trap enemies and has a specific life span, speed, and travel
 * time.
 */
public class PlayerBubble extends Bubble {

	// Static Fields
	public static final char CODE = 'Â°';
	private static float extraTravelTime = 1;
	private static float extraXSpeed = 1;

	// Instance Fields
	private Enemy enemy;
	private float timeHorizontalMoving;
	private float travelTime;

	// Constructors

	/**
	 * Constructs a {@code PlayerBubble} with the specified parameters.
	 * 
	 * @param x          the x-coordinate of the bubble
	 * @param y          the y-coordinate of the bubble
	 * @param width      the width of the bubble
	 * @param height     the height of the bubble
	 * @param xSpeed     the horizontal speed of the bubble
	 * @param airSpeed   the vertical speed of the bubble
	 * @param lifeSpan   the life span of the bubble
	 * @param travelTime the time before the bubble starts rising
	 */
	private PlayerBubble(float x, float y, float width, float height, float xSpeed, float airSpeed, float lifeSpan,
			float travelTime) {
		super(x, y, width, height, CODE);
		this.xSpeed = xSpeed * extraXSpeed;
		this.airSpeed = airSpeed;
		this.lifeSpan = 5000;
		this.travelTime = travelTime * extraTravelTime;
		this.timeHorizontalMoving = 500;
	}

	// Static Methods

	/**
	 * Gets the extra travel time multiplier for all player bubbles.
	 *
	 * @return the extra travel time multiplier
	 */
	public static float getExtraTravelTime() {
		return extraTravelTime;
	}

	/**
	 * Sets the extra travel time multiplier for all player bubbles.
	 *
	 * @param extraTravelTime the new extra travel time multiplier
	 */
	public static void setExtraTravelTime(float extraTravelTime) {
		PlayerBubble.extraTravelTime = extraTravelTime;
	}

	/**
	 * Gets the extra horizontal speed multiplier for all player bubbles.
	 *
	 * @return the extra horizontal speed multiplier
	 */
	public static float getExtraXSpeed() {
		return extraXSpeed;
	}

	/**
	 * Sets the extra horizontal speed multiplier for all player bubbles.
	 *
	 * @param extraXSpeed the new extra horizontal speed multiplier
	 */
	public static void setExtraXSpeed(float extraXSpeed) {
		PlayerBubble.extraXSpeed = extraXSpeed;
	}

	// Getters and Setters

	/**
	 * Gets the enemy trapped in this bubble.
	 *
	 * @return the trapped enemy, or {@code null} if no enemy is trapped
	 */
	public Enemy getEnemy() {
		return enemy;
	}

	/**
	 * Sets the enemy to be trapped in this bubble.
	 *
	 * @param enemy the enemy to trap in the bubble
	 */
	public void setEnemy(Enemy enemy) {
		if (this.enemy == null)
			this.enemy = enemy;
	}

	/**
	 * Checks if this bubble has a trapped enemy.
	 *
	 * @return {@code true} if an enemy is trapped, {@code false} otherwise
	 */
	public boolean hasEnemy() {
		return getEnemy() != null;
	}

	/**
	 * Gets the time this bubble will continue moving horizontally before starting
	 * to rise.
	 *
	 * @return the time remaining for horizontal movement
	 */
	public float getTimeHorizontalMoving() {
		return timeHorizontalMoving;
	}

	/**
	 * Sets the time this bubble will continue moving horizontally before starting
	 * to rise.
	 *
	 * @param timeHorizontalMoving the new time for horizontal movement
	 */
	public void setTimeHorizontalMoving(float timeHorizontalMoving) {
		this.timeHorizontalMoving = timeHorizontalMoving;
	}

	/**
	 * Sets the remaining time before this bubble starts rising.
	 *
	 * @param travelTime the new travel time
	 */
	public void setTravelTime(float travelTime) {
		this.travelTime = travelTime;
	}

	// Other Methods

	/**
	 * Decreases the remaining travel time by a specified amount.
	 * 
	 * @param k the amount by which to decrease the travel time
	 */
	private void decreaseTravelTime(float k) {
		setTravelTime(travelTime - k);
	}

	/**
	 * Decreases the remaining horizontal movement time by a specified amount.
	 * 
	 * @param k the amount by which to decrease the horizontal movement time
	 */
	protected void decreaseTimeHorizontalMoving(float k) {
		setTimeHorizontalMoving(getTimeHorizontalMoving() - k);
	}

	/**
	 * Makes the bubble rise with the specified vertical speed.
	 * 
	 * @param airSpeed the vertical speed at which the bubble rises
	 */
	@Override
	protected void rise(float airSpeed) {
		setAirSpeed(airSpeed);
		setxSpeed(0);
		decreaseTravelTime(1);
	}

	/**
	 * Pops the bubble, releasing any trapped enemy and removing the bubble from the
	 * game.
	 */
	@Override
	public void pop() {
		if (enemy != null) {
			enemy.setPosition(getX(), getY());
			Model.getInstance().getCurrentLevel().getEnemyManager().addEnemy(enemy);
		}
		Model.getInstance().getCurrentLevel().getBubbleManager().removePlayerBubble(this);
	}
	
	/**
	 * Pops the bubble, kills the trapped enemy, and awards points to the player.
	 * Also causes nearby bubbles to pop and kill their trapped enemies.
	 */
	public void popAndKill() {
		Model.getInstance().getCurrentLevel().getBubbleManager().removePlayerBubble(this);
		if (enemy != null) {
			enemy.setPosition(getX(), getY());
			Model.getInstance().getCurrentLevel().getEnemyManager().addEnemy(enemy);
			enemy.kill();
		}
		Model.getInstance().getCurrentUser().addPoints(100);
		Model.getInstance().getCurrentLevel().getBubbleManager().getPlayerBubbles().forEach(pb -> {
			if (getDistanceFrom(pb) < 7) {
				pb.popAndKill();
				Model.getInstance().getCurrentLevel().getPowerupManager().increaseNumberOfBubblesPopped();
			}
		});
	}

	/**
	 * Updates the bubble's position and state based on its remaining life span and
	 * travel time.
	 */
	@Override
	public void updateEntity() {
		if (lifeSpan <= 0) {
			pop();
		} else {
			decreaseLifeSpan(10.0f); // Decrease the bubble's life span
			decreaseTimeHorizontalMoving(10.0f * extraXSpeed / extraTravelTime); // Decrease horizontal movement time
		}

		if (lifeSpan <= 500)
			airSpeed = 0;

		if (timeHorizontalMoving <= 0)
			updateYPos();
		else
			updateXPos();

		if (travelTime > 0)
			decreaseTravelTime(1 * extraXSpeed);
		else if (travelTime <= 0)
			rise(-0.5f);
	}

	// Builder Class

	/**
	 * Builder class for constructing a {@code PlayerBubble} with specific
	 * properties.
	 */
	public static class Builder {
		private float x, y, width, height;
		private float xSpeed, airSpeed;
		private float lifeSpan = 10000;
		private float travelTime = 100;

		/**
		 * Constructs a Builder with the required parameters for a {@code PlayerBubble}.
		 * 
		 * @param x      the x-coordinate of the bubble
		 * @param y      the y-coordinate of the bubble
		 * @param width  the width of the bubble
		 * @param height the height of the bubble
		 */
		public Builder(float x, float y, float width, float height) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
		}

		/**
		 * Sets the horizontal speed of the bubble.
		 * 
		 * @param xSpeed the horizontal speed of the bubble
		 * @return the Builder instance
		 */
		public Builder xSpeed(float xSpeed) {
			this.xSpeed = xSpeed;
			return this;
		}

		/**
		 * Sets the vertical (air) speed of the bubble.
		 * 
		 * @param airSpeed the vertical speed of the bubble
		 * @return the Builder instance
		 */
		public Builder airSpeed(float airSpeed) {
			this.airSpeed = airSpeed;
			return this;
		}

		/**
		 * Sets the life span of the bubble.
		 * 
		 * @param lifeSpan the life span of the bubble
		 * @return the Builder instance
		 */
		public Builder lifeSpan(float lifeSpan) {
			this.lifeSpan = lifeSpan;
			return this;
		}

		/**
		 * Sets the travel time before the bubble starts rising.
		 * 
		 * @param travelTime the travel time before rising
		 * @return the Builder instance
		 */
		public Builder travelTime(float travelTime) {
			this.travelTime = travelTime;
			return this;
		}

		/**
		 * Builds and returns a {@code PlayerBubble} instance with the specified
		 * properties.
		 * 
		 * @return a new {@code PlayerBubble} instance
		 */
		public PlayerBubble build() {
			return new PlayerBubble(x, y, width, height, xSpeed, airSpeed, lifeSpan, travelTime);
		}
	}
}
